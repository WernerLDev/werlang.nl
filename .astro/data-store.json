[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.7.12","content-config-digest","dac948c625999b22","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://werlang.nl\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"dracula\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,50,51,87,88,107,108,127,128],"create-odata-endpoints-using-csharp",{"id":11,"data":13,"body":18,"filePath":19,"digest":20,"rendered":21,"legacyId":49},{"title":14,"publishDate":15,"tags":16},"Create Odata endpoints using C#",["Date","2025-01-27T00:00:00.000Z"],[17],"Odata","I have worked on many different web applications throughout my career and I always spent a lot of time writing custom endpoints. For each new feature in the frontend we would create an endpoint that would return a specific data-set for that feature.\n\nThis is not only very boring development work but also extremly time consuming. Luckily there are good alternatives. GraphQL and Odata are 2 standards that allow you to request specific data straight from the frontend. The result is a less opiniated and simpler backend API.\n\n### Difference between GraphQL and Odata\nGraphQL is a query language that replaces Rest while Odata is a layer on top of Rest. With both you can ask exactly what you want and nothing more. Also data from nested relations can be fetched with both standards.\n\nOdata supports filtering, sorting and pagination out of the box. With GraphQL you would have to implement that manually for each type you define in your API. \n\n### Odata in C# is simple\nC# and .NET have built-in support for Odata which makes it extremly easy to implement. All we have to do is define our data model using the `OdataConventionModelBuilder` class. Then we can use the `OdataController` base-class for our controllers.\n\n#### Step 1: Create EDM Model\nTo make the odata endpoint work we need to add our entities to an EdmModel. To make your odata endpoints available under the path `/odata` add the following to program.cs:\n\n```csharp\nvar modelBuilder = new ODataConventionModelBuilder();\nmodelBuilder.EntitySet\u003CTVShow>(\"TVShows\");\nmodelBuilder.EntitySet\u003CTVShowEpisode>(\"TVShowEpisodes\");\n\nbuilder.Services.AddControllers().AddOData(\n    options => options.Select().Filter().OrderBy().Expand().Count().SetMaxTop(100).AddRouteComponents(\n        \"odata\",\n        modelBuilder.GetEdmModel()));\n```\n\n#### Step 2: Create OdataControllers\nLast thing is to create the OdataControllers and you are done. Important is that the name of the controller should match the name of the EntitySet in the EdmModel from step 1. If your EntitySet is called `TVShows` then your controller should be `TVShowsController`.  \n\nThe controller should extend the base-class `OdataController`. Then you can add the `[EnableQuery]` annotation to allow Odata-queries to your endpoints. The function itself should return an `IQueryable` object.\n\nExample controller:\n\n```csharp\npublic class TVShowsController(repo: TVShowsRepository) : ODataController\n{\n  [EnableQuery]\n  public ActionResult\u003CIEnumerable\u003CTVShow>> Get()\n  {\n    return Ok(repo.All());\n  }\n\n  \n  [EnableQuery]\n  public SingleResult\u003CTVShow> Get([FromODataUri] int key)\n  {\n    var result = repo.FindById(key);\n    return SingleResult.Create(result);\n  }\n\n  [HttpPost]\n  public async Task\u003CActionResult\u003CTVShow>> Post([FromBody] TVShowDto entity)\n  {\n    if (!ModelState.IsValid)\n    {\n        return BadRequest(ModelState);\n    }\n    return Created(await repo.Create(entity));\n  }\n\n  [HttpPatch]\n  public async Task\u003CActionResult\u003CTVShow>> Patch([FromODataUri] int key, [FromBody] Delta\u003CTVShow> entity)\n  {\n    if (!ModelState.IsValid)\n    {\n        return BadRequest(ModelState);\n    }\n    var dbEntity = repo.FindById(key).FirstOrDefault();\n    if (dbEntity == null)\n    {\n      return NotFound();\n    }\n\n    return Ok(await repo.Patch(entity, dbEntity));\n  }\n\n  [HttpDelete]\n  public async Task\u003CIActionResult> Delete([FromODataUri] int key)\n  {\n    var dbEntity = repo.FindById(key).FirstOrDefault();\n    if (dbEntity != null)\n    {\n      await repo.Delete(key);\n    }\n\n    return NoContent();\n  }\n}\n```\n\n#### Step 3: Test the endpoint\n\nNow you have your EdmModel and Odata controllers it is possible to sent queries like this to the backend:\n\n`http://localhost:5123/odata/TVShows?$select=id,name&$expand=TVShowEpisodes&$top=10`\n\nMore details about the odata-standard can be found on [odata.org](https://www.odata.org/)","src/content/blog/create-odata-endpoints-using-csharp.md","8b2f0c185b6efd55",{"html":22,"metadata":23},"\u003Cp>I have worked on many different web applications throughout my career and I always spent a lot of time writing custom endpoints. For each new feature in the frontend we would create an endpoint that would return a specific data-set for that feature.\u003C/p>\n\u003Cp>This is not only very boring development work but also extremly time consuming. Luckily there are good alternatives. GraphQL and Odata are 2 standards that allow you to request specific data straight from the frontend. The result is a less opiniated and simpler backend API.\u003C/p>\n\u003Ch3 id=\"difference-between-graphql-and-odata\">Difference between GraphQL and Odata\u003C/h3>\n\u003Cp>GraphQL is a query language that replaces Rest while Odata is a layer on top of Rest. With both you can ask exactly what you want and nothing more. Also data from nested relations can be fetched with both standards.\u003C/p>\n\u003Cp>Odata supports filtering, sorting and pagination out of the box. With GraphQL you would have to implement that manually for each type you define in your API.\u003C/p>\n\u003Ch3 id=\"odata-in-c-is-simple\">Odata in C# is simple\u003C/h3>\n\u003Cp>C# and .NET have built-in support for Odata which makes it extremly easy to implement. All we have to do is define our data model using the \u003Ccode>OdataConventionModelBuilder\u003C/code> class. Then we can use the \u003Ccode>OdataController\u003C/code> base-class for our controllers.\u003C/p>\n\u003Ch4 id=\"step-1-create-edm-model\">Step 1: Create EDM Model\u003C/h4>\n\u003Cp>To make the odata endpoint work we need to add our entities to an EdmModel. To make your odata endpoints available under the path \u003Ccode>/odata\u003C/code> add the following to program.cs:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"csharp\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">var\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> modelBuilder \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#FF79C6\"> new\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> ODataConventionModelBuilder\u003C/span>\u003Cspan style=\"color:#F8F8F2\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">modelBuilder.\u003C/span>\u003Cspan style=\"color:#50FA7B\">EntitySet\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">TVShow\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>(\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">TVShows\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">modelBuilder.\u003C/span>\u003Cspan style=\"color:#50FA7B\">EntitySet\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">TVShowEpisode\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>(\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">TVShowEpisodes\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">builder.Services.\u003C/span>\u003Cspan style=\"color:#50FA7B\">AddControllers\u003C/span>\u003Cspan style=\"color:#F8F8F2\">().\u003C/span>\u003Cspan style=\"color:#50FA7B\">AddOData\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFB86C;font-style:italic\">    options\u003C/span>\u003Cspan style=\"color:#FF79C6\"> =>\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> options.\u003C/span>\u003Cspan style=\"color:#50FA7B\">Select\u003C/span>\u003Cspan style=\"color:#F8F8F2\">().\u003C/span>\u003Cspan style=\"color:#50FA7B\">Filter\u003C/span>\u003Cspan style=\"color:#F8F8F2\">().\u003C/span>\u003Cspan style=\"color:#50FA7B\">OrderBy\u003C/span>\u003Cspan style=\"color:#F8F8F2\">().\u003C/span>\u003Cspan style=\"color:#50FA7B\">Expand\u003C/span>\u003Cspan style=\"color:#F8F8F2\">().\u003C/span>\u003Cspan style=\"color:#50FA7B\">Count\u003C/span>\u003Cspan style=\"color:#F8F8F2\">().\u003C/span>\u003Cspan style=\"color:#50FA7B\">SetMaxTop\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#BD93F9\">100\u003C/span>\u003Cspan style=\"color:#F8F8F2\">).\u003C/span>\u003Cspan style=\"color:#50FA7B\">AddRouteComponents\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E9F284\">        \"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">odata\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        modelBuilder.\u003C/span>\u003Cspan style=\"color:#50FA7B\">GetEdmModel\u003C/span>\u003Cspan style=\"color:#F8F8F2\">()));\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"step-2-create-odatacontrollers\">Step 2: Create OdataControllers\u003C/h4>\n\u003Cp>Last thing is to create the OdataControllers and you are done. Important is that the name of the controller should match the name of the EntitySet in the EdmModel from step 1. If your EntitySet is called \u003Ccode>TVShows\u003C/code> then your controller should be \u003Ccode>TVShowsController\u003C/code>.\u003C/p>\n\u003Cp>The controller should extend the base-class \u003Ccode>OdataController\u003C/code>. Then you can add the \u003Ccode>[EnableQuery]\u003C/code> annotation to allow Odata-queries to your endpoints. The function itself should return an \u003Ccode>IQueryable\u003C/code> object.\u003C/p>\n\u003Cp>Example controller:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"csharp\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">public\u003C/span>\u003Cspan style=\"color:#FF79C6\"> class\u003C/span>\u003Cspan style=\"color:#8BE9FD\"> TVShowsController\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(repo: TVShowsRepository) : \u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">ODataController\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  [\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">EnableQuery\u003C/span>\u003Cspan style=\"color:#F8F8F2\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">  public\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> ActionResult\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">IEnumerable\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">TVShow\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>> \u003C/span>\u003Cspan style=\"color:#50FA7B\">Get\u003C/span>\u003Cspan style=\"color:#F8F8F2\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    return\u003C/span>\u003Cspan style=\"color:#50FA7B\"> Ok\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(repo.\u003C/span>\u003Cspan style=\"color:#50FA7B\">All\u003C/span>\u003Cspan style=\"color:#F8F8F2\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  [\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">EnableQuery\u003C/span>\u003Cspan style=\"color:#F8F8F2\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">  public\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> SingleResult\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">TVShow\u003C/span>\u003Cspan style=\"color:#F8F8F2\">> \u003C/span>\u003Cspan style=\"color:#50FA7B\">Get\u003C/span>\u003Cspan style=\"color:#F8F8F2\">([\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">FromODataUri\u003C/span>\u003Cspan style=\"color:#F8F8F2\">] \u003C/span>\u003Cspan style=\"color:#FF79C6\">int\u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\"> key\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    var\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> result \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> repo.\u003C/span>\u003Cspan style=\"color:#50FA7B\">FindById\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(key);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    return\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> SingleResult.\u003C/span>\u003Cspan style=\"color:#50FA7B\">Create\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(result);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  [\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">HttpPost\u003C/span>\u003Cspan style=\"color:#F8F8F2\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">  public\u003C/span>\u003Cspan style=\"color:#FF79C6\"> async\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> Task\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">ActionResult\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">TVShow\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>> \u003C/span>\u003Cspan style=\"color:#50FA7B\">Post\u003C/span>\u003Cspan style=\"color:#F8F8F2\">([\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">FromBody\u003C/span>\u003Cspan style=\"color:#F8F8F2\">] \u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">TVShowDto\u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\"> entity\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    if\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> (\u003C/span>\u003Cspan style=\"color:#FF79C6\">!\u003C/span>\u003Cspan style=\"color:#F8F8F2\">ModelState.IsValid)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">        return\u003C/span>\u003Cspan style=\"color:#50FA7B\"> BadRequest\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(ModelState);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    return\u003C/span>\u003Cspan style=\"color:#50FA7B\"> Created\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#FF79C6\">await\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> repo.\u003C/span>\u003Cspan style=\"color:#50FA7B\">Create\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(entity));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  [\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">HttpPatch\u003C/span>\u003Cspan style=\"color:#F8F8F2\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">  public\u003C/span>\u003Cspan style=\"color:#FF79C6\"> async\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> Task\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">ActionResult\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">TVShow\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>> \u003C/span>\u003Cspan style=\"color:#50FA7B\">Patch\u003C/span>\u003Cspan style=\"color:#F8F8F2\">([\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">FromODataUri\u003C/span>\u003Cspan style=\"color:#F8F8F2\">] \u003C/span>\u003Cspan style=\"color:#FF79C6\">int\u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\"> key\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, [\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">FromBody\u003C/span>\u003Cspan style=\"color:#F8F8F2\">] \u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">Delta\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">TVShow\u003C/span>\u003Cspan style=\"color:#F8F8F2\">> \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">entity\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    if\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> (\u003C/span>\u003Cspan style=\"color:#FF79C6\">!\u003C/span>\u003Cspan style=\"color:#F8F8F2\">ModelState.IsValid)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">        return\u003C/span>\u003Cspan style=\"color:#50FA7B\"> BadRequest\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(ModelState);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    var\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> dbEntity \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> repo.\u003C/span>\u003Cspan style=\"color:#50FA7B\">FindById\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(key).\u003C/span>\u003Cspan style=\"color:#50FA7B\">FirstOrDefault\u003C/span>\u003Cspan style=\"color:#F8F8F2\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    if\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> (dbEntity \u003C/span>\u003Cspan style=\"color:#FF79C6\">==\u003C/span>\u003Cspan style=\"color:#BD93F9\"> null\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">      return\u003C/span>\u003Cspan style=\"color:#50FA7B\"> NotFound\u003C/span>\u003Cspan style=\"color:#F8F8F2\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    return\u003C/span>\u003Cspan style=\"color:#50FA7B\"> Ok\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#FF79C6\">await\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> repo.\u003C/span>\u003Cspan style=\"color:#50FA7B\">Patch\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(entity, dbEntity));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  [\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">HttpDelete\u003C/span>\u003Cspan style=\"color:#F8F8F2\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">  public\u003C/span>\u003Cspan style=\"color:#FF79C6\"> async\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> Task\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">IActionResult\u003C/span>\u003Cspan style=\"color:#F8F8F2\">> \u003C/span>\u003Cspan style=\"color:#50FA7B\">Delete\u003C/span>\u003Cspan style=\"color:#F8F8F2\">([\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\">FromODataUri\u003C/span>\u003Cspan style=\"color:#F8F8F2\">] \u003C/span>\u003Cspan style=\"color:#FF79C6\">int\u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\"> key\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    var\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> dbEntity \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> repo.\u003C/span>\u003Cspan style=\"color:#50FA7B\">FindById\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(key).\u003C/span>\u003Cspan style=\"color:#50FA7B\">FirstOrDefault\u003C/span>\u003Cspan style=\"color:#F8F8F2\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    if\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> (dbEntity \u003C/span>\u003Cspan style=\"color:#FF79C6\">!=\u003C/span>\u003Cspan style=\"color:#BD93F9\"> null\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">      await\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> repo.\u003C/span>\u003Cspan style=\"color:#50FA7B\">Delete\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(key);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    return\u003C/span>\u003Cspan style=\"color:#50FA7B\"> NoContent\u003C/span>\u003Cspan style=\"color:#F8F8F2\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"step-3-test-the-endpoint\">Step 3: Test the endpoint\u003C/h4>\n\u003Cp>Now you have your EdmModel and Odata controllers it is possible to sent queries like this to the backend:\u003C/p>\n\u003Cp>\u003Ccode>http://localhost:5123/odata/TVShows?$select=id,name&#x26;$expand=TVShowEpisodes&#x26;$top=10\u003C/code>\u003C/p>\n\u003Cp>More details about the odata-standard can be found on \u003Ca href=\"https://www.odata.org/\">odata.org\u003C/a>\u003C/p>",{"headings":24,"localImagePaths":42,"remoteImagePaths":43,"frontmatter":44,"imagePaths":48},[25,29,32,36,39],{"depth":26,"slug":27,"text":28},3,"difference-between-graphql-and-odata","Difference between GraphQL and Odata",{"depth":26,"slug":30,"text":31},"odata-in-c-is-simple","Odata in C# is simple",{"depth":33,"slug":34,"text":35},4,"step-1-create-edm-model","Step 1: Create EDM Model",{"depth":33,"slug":37,"text":38},"step-2-create-odatacontrollers","Step 2: Create OdataControllers",{"depth":33,"slug":40,"text":41},"step-3-test-the-endpoint","Step 3: Test the endpoint",[],[],{"title":14,"author":45,"tags":46,"publishDate":47},"Werner",[17],["Date","2025-01-27T00:00:00.000Z"],[],"create-odata-endpoints-using-csharp.md","deploy-nextjs-to-ghpages",{"id":50,"data":52,"body":58,"filePath":59,"digest":60,"rendered":61,"legacyId":86},{"title":53,"publishDate":54,"tags":55},"Deploy static Next.js site to Github pages",["Date","2022-12-04T00:00:00.000Z"],[56,57],"test","blaat","On Github it has been possible to host a simple static website for a long time already. By default Github uses Jekyll as static site generator. I have tried this out in the past and it works well for simple sites, but it is not the only way to host a website on Github.\n\nIn this blog post I want to explain how I am deploying a Next.JS application to Github pages.\n\n### What is Next.JS?\n\nNext.JS is a React framework that allows you to built websites and web applications using React. By default it comes with anything you need so no configuration or setup required. All you need to do to get started is run:\n\n```\nnpx create-next-app@latest\n```\n\n#### The Export function\n\nOne of the many features it has is an export function. This feature will turn your Next.JS app into a static website. The export will execute all the `getStaticProps` functions inside your components and makes the output part of the Javascript bundle. This way there will be no API calls needed anymore during runtime.\n\nThe output of this export function is what I am hosting on Github pages.\n\n### Setup git repository\n\nBefore we can deploy anything you will need to create a new repository first. The repository will need to have 2 branches.\n\n1. main: This branch will contain our source code we work in\n2. gh-pages: This branch will contain the compiled version of our site\n\nAfter you have done that go to the `settings -> pages` of your repository.\n\n![Screenshot of Github settings page](/images/screenshot-ghpages.png)\n\nOn this page you can enable github pages by selecting a source branch and click `save`. As source branch select the branch `gh-pages`.\n\n### Create Nexct.JS project\n\nWe need something to deploy so create an empty Next.JS app using `npx create-next-app@latest` and push to the main-branch.\n\n### Setup Github workflow\n\nThis is where the magic happens. Github allows us to define build pipelines using Yaml files very similar to how pipelines work in Azure DevOps (for those who work with Azure DevOps at work).\n\nCheckout your repository locally and create the file `.github/workflows/gh-pages.yml` inside your repository.\n\nMy gh-pages workflow looks as following:\n\n```yaml\nname: GitHub Pages deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout 🛎️\n        uses: actions/checkout@v2.3.1\n\n      - name: Use Node.js 14.x\n        uses: actions/setup-node@v1\n        with:\n          node-version: \"14.x\"\n\n      - name: Run install\n        uses: borales/actions-yarn@v4\n        with:\n          cmd: install # will run `yarn install` command\n\n      - name: Build my App\n        run: yarn build && yarn export && touch ./out/.nojekyll\n\n      - name: Deploy 🚀\n        uses: JamesIves/github-pages-deploy-action@4.1.0\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          BRANCH: gh-pages # The branch the action should deploy to.\n          FOLDER: out # The folder the action should deploy.\n```\n\nFirst this pipeline defines a trigger. The trigger will execute the build-pipeline everytime new changes are pushed to the main-branch.\n\nUnder jobs we can define our build steps. The pipeline performs the following steps:\n\n1. Clone repository\n2. Install node\n3. Run yarn install\n4. Compile and export Next.JS website\n5. Deploy output to the branch `gh-pages`. (this should be the same branch you configured in the previous step).\n\nPush this file to your main branch and you are done. It will now compile and deploy a Next.JS app to the gh-pages-branch.","src/content/blog/deploy-nextjs-to-ghpages.md","835b2aeae5210c3c",{"html":62,"metadata":63},"\u003Cp>On Github it has been possible to host a simple static website for a long time already. By default Github uses Jekyll as static site generator. I have tried this out in the past and it works well for simple sites, but it is not the only way to host a website on Github.\u003C/p>\n\u003Cp>In this blog post I want to explain how I am deploying a Next.JS application to Github pages.\u003C/p>\n\u003Ch3 id=\"what-is-nextjs\">What is Next.JS?\u003C/h3>\n\u003Cp>Next.JS is a React framework that allows you to built websites and web applications using React. By default it comes with anything you need so no configuration or setup required. All you need to do to get started is run:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>npx create-next-app@latest\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"the-export-function\">The Export function\u003C/h4>\n\u003Cp>One of the many features it has is an export function. This feature will turn your Next.JS app into a static website. The export will execute all the \u003Ccode>getStaticProps\u003C/code> functions inside your components and makes the output part of the Javascript bundle. This way there will be no API calls needed anymore during runtime.\u003C/p>\n\u003Cp>The output of this export function is what I am hosting on Github pages.\u003C/p>\n\u003Ch3 id=\"setup-git-repository\">Setup git repository\u003C/h3>\n\u003Cp>Before we can deploy anything you will need to create a new repository first. The repository will need to have 2 branches.\u003C/p>\n\u003Col>\n\u003Cli>main: This branch will contain our source code we work in\u003C/li>\n\u003Cli>gh-pages: This branch will contain the compiled version of our site\u003C/li>\n\u003C/ol>\n\u003Cp>After you have done that go to the \u003Ccode>settings -> pages\u003C/code> of your repository.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/screenshot-ghpages.png\" alt=\"Screenshot of Github settings page\">\u003C/p>\n\u003Cp>On this page you can enable github pages by selecting a source branch and click \u003Ccode>save\u003C/code>. As source branch select the branch \u003Ccode>gh-pages\u003C/code>.\u003C/p>\n\u003Ch3 id=\"create-nexctjs-project\">Create Nexct.JS project\u003C/h3>\n\u003Cp>We need something to deploy so create an empty Next.JS app using \u003Ccode>npx create-next-app@latest\u003C/code> and push to the main-branch.\u003C/p>\n\u003Ch3 id=\"setup-github-workflow\">Setup Github workflow\u003C/h3>\n\u003Cp>This is where the magic happens. Github allows us to define build pipelines using Yaml files very similar to how pipelines work in Azure DevOps (for those who work with Azure DevOps at work).\u003C/p>\n\u003Cp>Checkout your repository locally and create the file \u003Ccode>.github/workflows/gh-pages.yml\u003C/code> inside your repository.\u003C/p>\n\u003Cp>My gh-pages workflow looks as following:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">name\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> GitHub Pages deploy\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#BD93F9\">on\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">  push\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">    branches\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">      -\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> main\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">jobs\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">  build\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">    runs-on\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> ubuntu-latest\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">    steps\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">      -\u003C/span>\u003Cspan style=\"color:#8BE9FD\"> name\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> Checkout 🛎️\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">        uses\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> actions/checkout@v2.3.1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">      -\u003C/span>\u003Cspan style=\"color:#8BE9FD\"> name\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> Use Node.js 14.x\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">        uses\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> actions/setup-node@v1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">        with\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">          node-version\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#E9F284\"> \"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">14.x\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">      -\u003C/span>\u003Cspan style=\"color:#8BE9FD\"> name\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> Run install\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">        uses\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> borales/actions-yarn@v4\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">        with\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">          cmd\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> install\u003C/span>\u003Cspan style=\"color:#6272A4\"> # will run `yarn install` command\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">      -\u003C/span>\u003Cspan style=\"color:#8BE9FD\"> name\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> Build my App\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">        run\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> yarn build &#x26;&#x26; yarn export &#x26;&#x26; touch ./out/.nojekyll\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">      -\u003C/span>\u003Cspan style=\"color:#8BE9FD\"> name\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> Deploy 🚀\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">        uses\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> JamesIves/github-pages-deploy-action@4.1.0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">        with\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">          GITHUB_TOKEN\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> ${{ secrets.GITHUB_TOKEN }}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">          BRANCH\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> gh-pages\u003C/span>\u003Cspan style=\"color:#6272A4\"> # The branch the action should deploy to.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">          FOLDER\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F1FA8C\"> out\u003C/span>\u003Cspan style=\"color:#6272A4\"> # The folder the action should deploy.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>First this pipeline defines a trigger. The trigger will execute the build-pipeline everytime new changes are pushed to the main-branch.\u003C/p>\n\u003Cp>Under jobs we can define our build steps. The pipeline performs the following steps:\u003C/p>\n\u003Col>\n\u003Cli>Clone repository\u003C/li>\n\u003Cli>Install node\u003C/li>\n\u003Cli>Run yarn install\u003C/li>\n\u003Cli>Compile and export Next.JS website\u003C/li>\n\u003Cli>Deploy output to the branch \u003Ccode>gh-pages\u003C/code>. (this should be the same branch you configured in the previous step).\u003C/li>\n\u003C/ol>\n\u003Cp>Push this file to your main branch and you are done. It will now compile and deploy a Next.JS app to the gh-pages-branch.\u003C/p>",{"headings":64,"localImagePaths":80,"remoteImagePaths":81,"frontmatter":82,"imagePaths":85},[65,68,71,74,77],{"depth":26,"slug":66,"text":67},"what-is-nextjs","What is Next.JS?",{"depth":33,"slug":69,"text":70},"the-export-function","The Export function",{"depth":26,"slug":72,"text":73},"setup-git-repository","Setup git repository",{"depth":26,"slug":75,"text":76},"create-nexctjs-project","Create Nexct.JS project",{"depth":26,"slug":78,"text":79},"setup-github-workflow","Setup Github workflow",[],[],{"title":53,"author":45,"tags":83,"publishDate":84},[56,57],["Date","2022-12-04T00:00:00.000Z"],[],"deploy-nextjs-to-ghpages.md","lazy-load-images",{"id":87,"data":89,"body":93,"filePath":94,"digest":95,"rendered":96,"legacyId":106},{"title":90,"publishDate":91,"tags":92},"Lazy load images using IntersactionObserver API",["Date","2024-04-07T00:00:00.000Z"],[56,57],"If you want to lazy load an image or have a fade-in animation when things are scrolled into view you could listen to the scroll-event and do all the calculations yourself. But this is a huge pain in the ass. Since 2018 we can use the [Intersection Observer API](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver) which makes this much easier.\n\nHere is a simple example with React and TypeScript:\n\n```typescript\nimport { useEffect, useRef, useState } from \"react\";\n\nexport type LazyImageProps = {\n  src: string;\n  alt: string;\n};\n\nexport const LazyImage = ({ src, alt }: LazyImageProps) => {\n  const imgRef = useRef\u003CHTMLElement | null>(null);\n  const [showImg, setShowImg] = useState(false);\n\n  useEffect(() => {\n    const onObserve = (\n      entries: IntersectionObserverEntry[],\n      observer: IntersectionObserver\n    ) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          setShowImg(true);\n          imgRef.current && observer.unobserve(imgRef.current);\n        }\n      });\n    };\n\n    const observer = new IntersectionObserver(onObserve);\n    imgRef.current && observer.observe(imgRef.current);\n\n    return () => observer.disconnect();\n  });\n\n  return (\n    \u003Cimg\n      ref={(ref) => (imgRef.current = ref)}\n      src={showImg ? src : \"\"}\n      alt={alt}\n    />\n  );\n};\n```\n\nHere I am setting the src-attribute when the image gets scrolled into view, but you could also set a className that triggers a CSS animation.\n\nWant to trigger it before it is completely scrolled into view, or even right before it becomes visible? Set some options:\n\n```typescript\nconst options: IntersectionObserverInit = {\n  rootMargin: \"100px\",\n  threshold: [0, 0.25, 0.5, 1],\n};\n\n// pass the object to the constructor of IntersectionObserver\nconst observer = new IntersectionObserver(onObserve, options);\n```\n\nrootMargin sets a margin of 100px around the image, and with threshold you can make it trigger multiple times. 1 means when the image is 100% visible, 0.5 means only half of the image is visible.","src/content/blog/lazy-load-images.md","af7e735ba454d3b6",{"html":97,"metadata":98},"\u003Cp>If you want to lazy load an image or have a fade-in animation when things are scrolled into view you could listen to the scroll-event and do all the calculations yourself. But this is a huge pain in the ass. Since 2018 we can use the \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver\">Intersection Observer API\u003C/a> which makes this much easier.\u003C/p>\n\u003Cp>Here is a simple example with React and TypeScript:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { useEffect, useRef, useState } \u003C/span>\u003Cspan style=\"color:#FF79C6\">from\u003C/span>\u003Cspan style=\"color:#E9F284\"> \"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">react\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">export\u003C/span>\u003Cspan style=\"color:#FF79C6\"> type\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> LazyImageProps\u003C/span>\u003Cspan style=\"color:#FF79C6\"> =\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  src\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> string\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  alt\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> string\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">export\u003C/span>\u003Cspan style=\"color:#FF79C6\"> const\u003C/span>\u003Cspan style=\"color:#50FA7B\"> LazyImage\u003C/span>\u003Cspan style=\"color:#FF79C6\"> =\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> ({ \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">src\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">alt\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> }\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> LazyImageProps\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) \u003C/span>\u003Cspan style=\"color:#FF79C6\">=>\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">  const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> imgRef \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#50FA7B\"> useRef\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">HTMLElement\u003C/span>\u003Cspan style=\"color:#FF79C6\"> |\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> null\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>(\u003C/span>\u003Cspan style=\"color:#BD93F9\">null\u003C/span>\u003Cspan style=\"color:#F8F8F2\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">  const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> [showImg, setShowImg] \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#50FA7B\"> useState\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#BD93F9\">false\u003C/span>\u003Cspan style=\"color:#F8F8F2\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#50FA7B\">  useEffect\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(() \u003C/span>\u003Cspan style=\"color:#FF79C6\">=>\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    const\u003C/span>\u003Cspan style=\"color:#50FA7B\"> onObserve\u003C/span>\u003Cspan style=\"color:#FF79C6\"> =\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFB86C;font-style:italic\">      entries\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> IntersectionObserverEntry\u003C/span>\u003Cspan style=\"color:#F8F8F2\">[],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFB86C;font-style:italic\">      observer\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> IntersectionObserver\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    ) \u003C/span>\u003Cspan style=\"color:#FF79C6\">=>\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      entries.\u003C/span>\u003Cspan style=\"color:#50FA7B\">forEach\u003C/span>\u003Cspan style=\"color:#F8F8F2\">((\u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">entry\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) \u003C/span>\u003Cspan style=\"color:#FF79C6\">=>\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">        if\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> (entry.isIntersecting) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#50FA7B\">          setShowImg\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#BD93F9\">true\u003C/span>\u003Cspan style=\"color:#F8F8F2\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">          imgRef.current \u003C/span>\u003Cspan style=\"color:#FF79C6\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> observer.\u003C/span>\u003Cspan style=\"color:#50FA7B\">unobserve\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(imgRef.current);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> observer \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#FF79C6;font-weight:bold\"> new\u003C/span>\u003Cspan style=\"color:#50FA7B\"> IntersectionObserver\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(onObserve);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    imgRef.current \u003C/span>\u003Cspan style=\"color:#FF79C6\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> observer.\u003C/span>\u003Cspan style=\"color:#50FA7B\">observe\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(imgRef.current);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    return\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> () \u003C/span>\u003Cspan style=\"color:#FF79C6\">=>\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> observer.\u003C/span>\u003Cspan style=\"color:#50FA7B\">disconnect\u003C/span>\u003Cspan style=\"color:#F8F8F2\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">  return\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\">img\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      ref\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\">{(ref) => (imgRef.current \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> ref)}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      src\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\">{showImg ? src \u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#E9F284\"> \"\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      alt\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\">{alt}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">    />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Here I am setting the src-attribute when the image gets scrolled into view, but you could also set a className that triggers a CSS animation.\u003C/p>\n\u003Cp>Want to trigger it before it is completely scrolled into view, or even right before it becomes visible? Set some options:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> options\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#8BE9FD;font-style:italic\"> IntersectionObserverInit\u003C/span>\u003Cspan style=\"color:#FF79C6\"> =\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  rootMargin\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#E9F284\"> \"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">100px\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  threshold\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> [\u003C/span>\u003Cspan style=\"color:#BD93F9\">0\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#BD93F9\">0.25\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#BD93F9\">0.5\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#BD93F9\">1\u003C/span>\u003Cspan style=\"color:#F8F8F2\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">// pass the object to the constructor of IntersectionObserver\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> observer \u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#FF79C6;font-weight:bold\"> new\u003C/span>\u003Cspan style=\"color:#50FA7B\"> IntersectionObserver\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(onObserve, options);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>rootMargin sets a margin of 100px around the image, and with threshold you can make it trigger multiple times. 1 means when the image is 100% visible, 0.5 means only half of the image is visible.\u003C/p>",{"headings":99,"localImagePaths":100,"remoteImagePaths":101,"frontmatter":102,"imagePaths":105},[],[],[],{"title":90,"author":45,"tags":103,"publishDate":104},[56,57],["Date","2024-04-07T00:00:00.000Z"],[],"lazy-load-images.md","view-transitions-api",{"id":107,"data":109,"body":113,"filePath":114,"digest":115,"rendered":116,"legacyId":126},{"title":110,"publishDate":111,"tags":112},"Introduction to CSS view transitions",["Date","2024-10-12T00:00:00.000Z"],[],"CSS has a new cool feature. It is called [view transitions](https://drafts.csswg.org/css-view-transitions/) and it can be used to easily animate transitions between pages or DOM updates.\n\nCurrently it is supported in all browsers except Firefox.\n\nWhen you want to make a transition between pages in an MPA you only need CSS, if you want to trigger view transitions in an SPA you need a tiny bit of Javascript.\n\nTo trigger a view transition with Javascript you need the following peace of code:\n\n```typescript\ndocument.startViewTransition(() => {\n  // update DOM here\n});\n```\n\nAnd this will happen:\n\n1. A snapshot of the current view is made\n2. The function that updates the DOM is called\n3. A second snapshot of the updated view is made\n\nAfter this you can animate the old and new view using CSS. For this you have to apply CSS animations to the pseudo-selectors `::view-transition-new` and `::view-transition-old`.\n\nIf you would want to create an animation when switching between dark and light mode you could write something as following:\n\n```css\n::view-transition-group(root) {\n  animation-duration: 1.25s;\n}\n\n::view-transition-new(root) {\n  animation-name: fadeIn;\n}\n\n[data-bs-theme=\"dark\"]::view-transition-old(root) {\n  animation: none;\n}\n\n[data-bs-theme=\"dark\"]::view-transition-new(root) {\n  animation-name: fadeIn;\n}\n\n@keyframes fadeIn {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n```\n\nOf course this is just a very basic example. There are many more things you can do with view transitions. For some cool examples you can check the [Chrome for developers](https://developer.chrome.com/docs/web-platform/view-transitions/) website.","src/content/blog/view-transitions-api.md","5150a16090726b54",{"html":117,"metadata":118},"\u003Cp>CSS has a new cool feature. It is called \u003Ca href=\"https://drafts.csswg.org/css-view-transitions/\">view transitions\u003C/a> and it can be used to easily animate transitions between pages or DOM updates.\u003C/p>\n\u003Cp>Currently it is supported in all browsers except Firefox.\u003C/p>\n\u003Cp>When you want to make a transition between pages in an MPA you only need CSS, if you want to trigger view transitions in an SPA you need a tiny bit of Javascript.\u003C/p>\n\u003Cp>To trigger a view transition with Javascript you need the following peace of code:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">document.\u003C/span>\u003Cspan style=\"color:#50FA7B\">startViewTransition\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(() \u003C/span>\u003Cspan style=\"color:#FF79C6\">=>\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6272A4\">  // update DOM here\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And this will happen:\u003C/p>\n\u003Col>\n\u003Cli>A snapshot of the current view is made\u003C/li>\n\u003Cli>The function that updates the DOM is called\u003C/li>\n\u003Cli>A second snapshot of the updated view is made\u003C/li>\n\u003C/ol>\n\u003Cp>After this you can animate the old and new view using CSS. For this you have to apply CSS animations to the pseudo-selectors \u003Ccode>::view-transition-new\u003C/code> and \u003Ccode>::view-transition-old\u003C/code>.\u003C/p>\n\u003Cp>If you would want to create an animation when switching between dark and light mode you could write something as following:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">::view-transition-group(root\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">  animation-duration\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#BD93F9\"> 1.25\u003C/span>\u003Cspan style=\"color:#FF79C6\">s\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">::view-transition-new(root\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">  animation-name\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> fadeIn;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">[\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\">data-bs-theme\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">dark\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">]\u003C/span>\u003Cspan style=\"color:#FF79C6\">::view-transition-old(root\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">  animation\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#BD93F9\"> none\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">[\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\">data-bs-theme\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">dark\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">]\u003C/span>\u003Cspan style=\"color:#FF79C6\">::view-transition-new(root\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">  animation-name\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> fadeIn;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FF79C6\">@keyframes\u003C/span>\u003Cspan style=\"color:#FFB86C;font-style:italic\"> fadeIn\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  0% {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">    opacity\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#BD93F9\"> 0\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  100% {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#8BE9FD\">    opacity\u003C/span>\u003Cspan style=\"color:#FF79C6\">:\u003C/span>\u003Cspan style=\"color:#BD93F9\"> 1\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Of course this is just a very basic example. There are many more things you can do with view transitions. For some cool examples you can check the \u003Ca href=\"https://developer.chrome.com/docs/web-platform/view-transitions/\">Chrome for developers\u003C/a> website.\u003C/p>",{"headings":119,"localImagePaths":120,"remoteImagePaths":121,"frontmatter":122,"imagePaths":125},[],[],[],{"title":110,"author":45,"tags":123,"publishDate":124},[],["Date","2024-10-12T00:00:00.000Z"],[],"view-transitions-api.md","html-tags",{"id":127,"data":129,"body":133,"filePath":134,"digest":135,"rendered":136,"legacyId":164},{"title":130,"publishDate":131,"tags":132},"HTML tags you may not know about",["Date","2022-12-26T00:00:00.000Z"],[56,57],"Modern HTML offers many HTML elements to make websites more accessible. You may already be using `\u003Cheader>`, `\u003Cmain>` and `\u003Cfooter>` for example. But there are some lesser known HTML elements that can be really usefull to make a website or application just a little bit more accessible. Here are a few of them:\n\n### HTML &lt;time&gt; element\n\nIn many applications and websites I have worked on I saw something like the following for dates:\n\n```html\n\u003Cp>Published at: \u003Cspan class=\"publishDate\">10-10-2022\u003C/span>\u003C/p>\n```\n\nThe problem with this approach is that screen readers will not know that the string `10-10-2022` is a date. Luckily HTML offers a solution for that with the `\u003Ctime>` tag. This tag offers a [datetime attribute](https://www.w3schools.com/tags/att_time_datetime.asp) that takes an date or time string as argument. This can be usefull for screen readers and other machines that may read your website.\n\nExample:\n\n```html\n\u003Cp>I have a date on \u003Ctime datetime=\"2022-02-14\">Valentines day\u003C/time>.\u003C/p>\n```\n\nThis attribute can be used for dates, time, datetime or durations.\n\n### HTML &lt;abbr&gt; element\n\nOrganisations love abbriviations but it is not always clear what they mean. The abbr-tag can be handy to tell people what an abbriviation stands for. By default it will be rendered with a dotted underline. When the user hovers over it it will show the title of the abbr-tag.\n\n```html\n\u003Cabbr title=\"World Health Organization\">WHO\u003C/abbr>\n```\n\n### HTML &lt;dialog&gt; element\n\nIn many applications and websites the use of dialogs are really common. But did you know HTML as an element for that? No need to create something custom with divs. Just do this instead:\n\n```html\n\u003Cdialog open>The content of your dialog\u003C/dialog>\n```\n\n### Add suggestions to an input-field\n\nRecently I found out you can set a list of suggestions to an input-field. If you connect this to a backend API that generates suggestions based on the current input you could use this for search-fields.\n\nAn example with hardcoded suggestions:\n\n```html\n\u003Clabel for=\"browser\">Choose your browser from the list:\u003C/label>\n\u003Cinput list=\"browsers\" name=\"browser\" id=\"browser\" />\n\n\u003Cdatalist id=\"browsers\">\n  \u003Coption value=\"Edge\">\u003C/option>\n  \u003Coption value=\"Firefox\">\u003C/option>\n  \u003Coption value=\"Chrome\">\u003C/option>\n  \u003Coption value=\"Opera\">\u003C/option>\n  \u003Coption value=\"Safari\">\u003C/option>\n\u003C/datalist>\n```\n\n### HTML &lt;progress&gt; and &lt;meter&gt; element\n\nIf you need to show the progress of some background process that is running you do not need to build something custom with divs. Instead you can use the `\u003Cprogress>`-tag instead.\n\n```html\n\u003Clabel for=\"file\">Downloading progress:\u003C/label>\n\u003Cprogress id=\"file\" value=\"32\" max=\"100\">32%\u003C/progress>\n```\n\nFor situations where you need a gauge. Like for example current disk-usage, you can use the `\u003Cmeter>`-tag.\n\n```html\n\u003Clabel for=\"disk_d\">Disk usage D:\u003C/label>\n\u003Cmeter id=\"disk_d\" value=\"0.6\">60%\u003C/meter>\n```\n\n### Conclusion\n\nThere you go. A few examples of HTML tags you may not knew about but could be usefull in some cases.\n\nThere are many more HTML elements so before using a div or span it can be usefull to check the [w3c website](https://www.w3schools.com/tags/default.asp) to see if HTML offers a specific tag.\n\nAn HTML page that only uses divs and paragraphs are not as accessible as pages that use all those specific tags. They add meaning to your content. People relying on screenreaders will thank you.","src/content/blog/html-tags.md","ce9239c884ead92a",{"html":137,"metadata":138},"\u003Cp>Modern HTML offers many HTML elements to make websites more accessible. You may already be using \u003Ccode>&#x3C;header>\u003C/code>, \u003Ccode>&#x3C;main>\u003C/code> and \u003Ccode>&#x3C;footer>\u003C/code> for example. But there are some lesser known HTML elements that can be really usefull to make a website or application just a little bit more accessible. Here are a few of them:\u003C/p>\n\u003Ch3 id=\"html-time-element\">HTML &#x3C;time> element\u003C/h3>\n\u003Cp>In many applications and websites I have worked on I saw something like the following for dates:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#FF79C6\">p\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>Published at: &#x3C;\u003C/span>\u003Cspan style=\"color:#FF79C6\">span\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\"> class\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">publishDate\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>10-10-2022&#x3C;/\u003C/span>\u003Cspan style=\"color:#FF79C6\">span\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#FF79C6\">p\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The problem with this approach is that screen readers will not know that the string \u003Ccode>10-10-2022\u003C/code> is a date. Luckily HTML offers a solution for that with the \u003Ccode>&#x3C;time>\u003C/code> tag. This tag offers a \u003Ca href=\"https://www.w3schools.com/tags/att_time_datetime.asp\">datetime attribute\u003C/a> that takes an date or time string as argument. This can be usefull for screen readers and other machines that may read your website.\u003C/p>\n\u003Cp>Example:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#FF79C6\">p\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>I have a date on &#x3C;\u003C/span>\u003Cspan style=\"color:#FF79C6\">time\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\"> datetime\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">2022-02-14\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>Valentines day&#x3C;/\u003C/span>\u003Cspan style=\"color:#FF79C6\">time\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>.&#x3C;/\u003C/span>\u003Cspan style=\"color:#FF79C6\">p\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This attribute can be used for dates, time, datetime or durations.\u003C/p>\n\u003Ch3 id=\"html-abbr-element\">HTML &#x3C;abbr> element\u003C/h3>\n\u003Cp>Organisations love abbriviations but it is not always clear what they mean. The abbr-tag can be handy to tell people what an abbriviation stands for. By default it will be rendered with a dotted underline. When the user hovers over it it will show the title of the abbr-tag.\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#FF79C6\">abbr\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\"> title\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">World Health Organization\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>WHO&#x3C;/\u003C/span>\u003Cspan style=\"color:#FF79C6\">abbr\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"html-dialog-element\">HTML &#x3C;dialog> element\u003C/h3>\n\u003Cp>In many applications and websites the use of dialogs are really common. But did you know HTML as an element for that? No need to create something custom with divs. Just do this instead:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#FF79C6\">dialog\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\"> open\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>The content of your dialog&#x3C;/\u003C/span>\u003Cspan style=\"color:#FF79C6\">dialog\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"add-suggestions-to-an-input-field\">Add suggestions to an input-field\u003C/h3>\n\u003Cp>Recently I found out you can set a list of suggestions to an input-field. If you connect this to a backend API that generates suggestions based on the current input you could use this for search-fields.\u003C/p>\n\u003Cp>An example with hardcoded suggestions:\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#FF79C6\">label\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\"> for\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">browser\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>Choose your browser from the list:&#x3C;/\u003C/span>\u003Cspan style=\"color:#FF79C6\">label\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#FF79C6\">input\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\"> list\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">browsers\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\"> name\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">browser\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\"> id\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">browser\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#FF79C6\">datalist\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\"> id\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">browsers\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#FF79C6\">option\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\"> value\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">Edge\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#FF79C6\">option\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#FF79C6\">option\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\"> value\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">Firefox\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#FF79C6\">option\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#FF79C6\">option\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\"> value\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">Chrome\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#FF79C6\">option\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#FF79C6\">option\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\"> value\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">Opera\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#FF79C6\">option\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#FF79C6\">option\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\"> value\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">Safari\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#FF79C6\">option\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#FF79C6\">datalist\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"html-progress-and-meter-element\">HTML &#x3C;progress> and &#x3C;meter> element\u003C/h3>\n\u003Cp>If you need to show the progress of some background process that is running you do not need to build something custom with divs. Instead you can use the \u003Ccode>&#x3C;progress>\u003C/code>-tag instead.\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#FF79C6\">label\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\"> for\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">file\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>Downloading progress:&#x3C;/\u003C/span>\u003Cspan style=\"color:#FF79C6\">label\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#FF79C6\">progress\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\"> id\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">file\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\"> value\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">32\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\"> max\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">100\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>32%&#x3C;/\u003C/span>\u003Cspan style=\"color:#FF79C6\">progress\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>For situations where you need a gauge. Like for example current disk-usage, you can use the \u003Ccode>&#x3C;meter>\u003C/code>-tag.\u003C/p>\n\u003Cpre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#FF79C6\">label\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\"> for\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">disk_d\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>Disk usage D:&#x3C;/\u003C/span>\u003Cspan style=\"color:#FF79C6\">label\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#FF79C6\">meter\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\"> id\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">disk_d\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#50FA7B;font-style:italic\"> value\u003C/span>\u003Cspan style=\"color:#FF79C6\">=\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F1FA8C\">0.6\u003C/span>\u003Cspan style=\"color:#E9F284\">\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>60%&#x3C;/\u003C/span>\u003Cspan style=\"color:#FF79C6\">meter\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"conclusion\">Conclusion\u003C/h3>\n\u003Cp>There you go. A few examples of HTML tags you may not knew about but could be usefull in some cases.\u003C/p>\n\u003Cp>There are many more HTML elements so before using a div or span it can be usefull to check the \u003Ca href=\"https://www.w3schools.com/tags/default.asp\">w3c website\u003C/a> to see if HTML offers a specific tag.\u003C/p>\n\u003Cp>An HTML page that only uses divs and paragraphs are not as accessible as pages that use all those specific tags. They add meaning to your content. People relying on screenreaders will thank you.\u003C/p>",{"headings":139,"localImagePaths":158,"remoteImagePaths":159,"frontmatter":160,"imagePaths":163},[140,143,146,149,152,155],{"depth":26,"slug":141,"text":142},"html-time-element","HTML \u003Ctime> element",{"depth":26,"slug":144,"text":145},"html-abbr-element","HTML \u003Cabbr> element",{"depth":26,"slug":147,"text":148},"html-dialog-element","HTML \u003Cdialog> element",{"depth":26,"slug":150,"text":151},"add-suggestions-to-an-input-field","Add suggestions to an input-field",{"depth":26,"slug":153,"text":154},"html-progress-and-meter-element","HTML \u003Cprogress> and \u003Cmeter> element",{"depth":26,"slug":156,"text":157},"conclusion","Conclusion",[],[],{"title":130,"author":45,"tags":161,"publishDate":162},[56,57],["Date","2022-12-26T00:00:00.000Z"],[],"html-tags.md"]